// autograde.gas
// =============
//
// This file contains all the code related to the Autograde function.
//
// All access to the autograde script properties should be within 
// the autograde object.

// TODO_AJR - assert on edits when Autograde on (?).

// TODO_AJR - Decide on consistent function description styles.

// TODO_AJR - Should we be checking explicitly or just using falsey/truthy
// type conversion. if (!a) {...} or if (a === null) {...}. I probably
// prefer the later as it's stronger typing, the other could fall through
// with unexpected values. 

// TODO_AJR - Is deleting a property each time going to be slower than setting it?

// The global Autograde object
// ---------------------------

// TODO_AJR - Should we just have an instance of this when we need it?

Autograde = new AutogradeClass();

// Autograde class
// ---------------

function AutogradeClass()
{
  // Private properties
  // ==================
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Autograde/UI Events - offsets into the State/Event Table.
  var agUIEvents = 
    {
      AUTOGRADE_ON: 0,
      AUTOGRADE_OFF: 1,
      UI_ON: 2,
      UI_OFF: 3,
      LENGTH: 4
    };
  
  // setAgUiState()
  // ----------------
  //
  // This is a state machine that ensures that only legal combinations of 
  // autograde and UI (present and previous) states.
  //
  // There is a very tight relationship between the UI and autograde.
  // When autograde is on, UI must be off. But when autograde is turned off
  // the UI is usually turned back on, unless it was originally off in which
  // case it is left off.
  // 
  // So the autograde/UI state can be described by three flags:
  //
  // Each of these states are stored in a Script Property to ensure they are
  // persistent for the life of the script, not just a particular execution.
  //
  // To check that only the correct states are being used each flag is stored 
  // in a bitmask and on an event (autograde or the UI being turned on or off) 
  // the subsequent state is derived from the State/Event Table.
  // 
  //   bit 0 - autograde: on (1) or off (0)
  //   bit 1 - UI: on (1) or off (0)
  //   bit 2 - UI state before the autograde was toggled: on (1) or off (0)
  //   bit 3 - Whether this state is allowed: ok (0) or illegal (1)
    
  function setAgUiState(event)
  {    
    Debug.info("AutogradeClass.setAgUiState() - event: " + event);
  
    Debug.assert(typeof event === "number" && event < agUIEvents.LENGTH, 
                 "AutogradeClass.setAgUiState() - Illegal event");
  
    // Autograde/UI bitmasks of their possible states.
    var UIWASOFF_UIOFF_AGOFF = 0;  // 0000
    var UIWASOFF_UIOFF_AGON  = 1;  // 0001
    var UIWASOFF_UION__AGOFF = 2;  // 0010
    var UIWASOFF_UION__AGON  = 3;  // 0011
    var UIWASON__UIOFF_AGOFF = 4;  // 0100
    var UIWASON__UIOFF_AGON  = 5;  // 0101
    var UIWASON__UION__AGOFF = 6;  // 0110
    var UIWASON__UION__AGON  = 7;  // 0111
    var ILLEGAL_STATE        = 15; // 1111
  
    var AG_MASK = 1;
    var UI_MASK = 2;
    var UIWASON_MASK = 4;
  
    var stateEventTable = 
      [
        // AUTOGRADE_ON       AUTOGRADE_OFF         UI_ON                 UI_OFF
        // ------------       -------------         -----                 ------ 
        [UIWASOFF_UIOFF_AGON, ILLEGAL_STATE,        UIWASOFF_UION__AGOFF, ILLEGAL_STATE],        // UIWASOFF_UIOFF_AGOFF
        [ILLEGAL_STATE,       UIWASOFF_UIOFF_AGOFF, ILLEGAL_STATE,        ILLEGAL_STATE],        // UIWASOFF_UIOFF_AGON
        [UIWASON__UIOFF_AGON, ILLEGAL_STATE,        ILLEGAL_STATE,        UIWASON__UIOFF_AGOFF], // UIWASOFF_UION__AGOFF
        [ILLEGAL_STATE,       ILLEGAL_STATE,        ILLEGAL_STATE,        ILLEGAL_STATE],        // UIWASOFF_UION__AGON
        [UIWASOFF_UIOFF_AGON, ILLEGAL_STATE,        UIWASOFF_UION__AGOFF, ILLEGAL_STATE],        // UIWASON__UIOFF_AGOFF
        [ILLEGAL_STATE,       UIWASOFF_UION__AGOFF, ILLEGAL_STATE,        ILLEGAL_STATE],        // UIWASON__UIOFF_AGON
        [UIWASON__UIOFF_AGON, ILLEGAL_STATE,        UIWASON__UION__AGOFF, UIWASON__UIOFF_AGOFF], // UIWASON__UION__AGOFF
        [ILLEGAL_STATE,       ILLEGAL_STATE,        ILLEGAL_STATE,        ILLEGAL_STATE]         // UIWASON__UION__AGON
      ];
  
    // Get the present state
    // ---------------------
  
    // Cast the propertie's value as a Boolean and then a number.
    // So e.g. if the property is "true" this is cast to true and then 1.
    var v = ScriptProperties.getProperty(SCRIPT_AUTOGRADE_ENABLED);
    var b = !!v;
    var autogradeOn = +b;
    
    var v1 = ScriptProperties.getProperty(SCRIPT_UI_OFF);
    var b1 = !v1;
    var uiOn = +b1;
    
    var v2 = ScriptProperties.getProperty(SCRIPT_UI_WAS_OFF);
    var b2 = !v2;
    var uiWasOn = +b2;
    
    // Set up a three digit bitmask to represent the state of 
    // the autograde, UI and the UI state before the last event.
    var presentState = (uiWasOn << 2) | (uiOn << 1) | autogradeOn;
    
    Debug.info("AutogradeClass.setAgUiState() - present state: " + presentState);
    
    // Get the new state
    // -----------------
    
    var newState = stateEventTable[presentState][event];
    
    Debug.info("AutogradeClass.setAgUiState() - new state: " + newState);  
    
    Debug.assert(newState !== ILLEGAL_STATE, "AutogradeClass.setAgUiState() - illegal state");
    
    // Set the script properties
    // -------------------------
    
    if (!!(newState & AG_MASK))
      {
        ScriptProperties.setProperty(SCRIPT_AUTOGRADE_ENABLED, "true");
        Debug.info("AutogradeClass.setAgUiState() - autograde on");      
      }
    else
      {
        ScriptProperties.deleteProperty(SCRIPT_AUTOGRADE_ENABLED);
        Debug.info("AutogradeClass.setAgUiState() - autograde off");            
      }
  
    if (!!(newState & UI_MASK))
      {
        ScriptProperties.deleteProperty(SCRIPT_UI_OFF);
        Debug.info("AutogradeClass.setAgUiState() - UI on");      
      }
    else
      {
        ScriptProperties.setProperty(SCRIPT_UI_OFF, "true");
        Debug.info("AutogradeClass.setAgUiState() - UI off");            
      }
  
    if (!!(newState & UIWASON_MASK))
      {
        ScriptProperties.deleteProperty(SCRIPT_UI_WAS_OFF);
        Debug.info("AutogradeClass.setAgUiState() - UI was on");      
      }
    else
      {
        ScriptProperties.setProperty(SCRIPT_UI_WAS_OFF, "true");
        Debug.info("AutogradeClass.setAgUiState() - UI was off");            
      }
      
  }; // AutogradeClass.setAgUiState()
    
  // Privileged methods
  // ==================
  //
  // Methods that are public but have access to local properties.
  
  // on()
  // ----
  //
  // Enable autograding. In order to perform autograding all grading 
  // and email options need to have been setup. If they have give the 
  // user the option to change them.

  this.on = function()
  {
    Debug.info("AutogradeClass.on()");
  
    var gather_app = null;
    var result;

    // TODO_AJR - There are bugs in getting autograde to initialise
    // the grading and email options, so force the user to do this
    // with a manual grade for now.

    if (gotGradingAndEmailInfo())
      {
        this.finalizeOn();
      }
    else
      {
        Browser.msgBox(langstr("FLB_STR_NOTIFICATION"), 
                       "Before enabling autograde the grading and email " + 
                       "settings need to be initialised by doing a manual " + 
                       "grade and emailing the result. Please do this before " + 
                       "enabling autograde. Click OK to proceed.",
                       Browser.Buttons.OK);
      }

/*
    if (gotGradingAndEmailInfo())
    {
      result = Browser.msgBox(langstr("FLB_STR_NOTIFICATION"), 
                              "Before enabling autograde would you like " +
                              "to update your grading and email settings?",
                              Browser.Buttons.YES_NO);
      
      if (result === "yes")
      {
        gather_app = launchOptionsUpdate();
      }     
    }
    else
    {
      Browser.msgBox(langstr("FLB_STR_NOTIFICATION"), 
                     "Before enabling autograde you need to " +
                     "update your grading and email settings. " +
                     "Click OK to proceed.",
                     Browser.Buttons.OK);
      
      gather_app = launchOptionsUpdate();
    }
    
    // What's the user decided?
    
    if (gather_app === null)
      {
        // Don't need to gather grading or emails options so finish
        // off enabling autograde.
        this.finalizeOn();
      }      
    else
      {
        // Autograde options UI has been displayed, the event handlers
        // will take it from here.
        return gather_app;
      }
*/      
    // TODO_AJR - Don't need two returns.  

    return gather_app;
    
    // launchOptionsUpdate()
    // ---------------------
    
    function launchOptionsUpdate()
    {
      Debug.info("AutogradeClass.on.launchOptionsUpdate()");
  
      ScriptProperties.setProperty(SCRIPT_AUTOGRADE_GATHERING_OPTIONS, "true");
      
      // Gather or update grading options via UI.
      var sheet = getSheetWithSubmissions(ss);
      var app = UI.step1Grading(sheet); 
      ss.show(app); 
      return app;
      
    } // launchOptionsUpdate()
    
  } // AutogradeClass.on()
  
  // off()
  // -----
  //
  // Disable autograding.
  
  this.off = function()
  {
    Debug.info("AutogradeClass.off()");  
  
    var trigger_id = ScriptProperties.getProperty(SCRIPT_AUTOGRADE_SUBMIT_TRIGGER_ID);
  
    if (trigger_id)
      {
        // Delete actual trigger.
        deleteTrigger(trigger_id);
      
        // Clear the stored trigger ID.
        ScriptProperties.deleteProperty(SCRIPT_AUTOGRADE_SUBMIT_TRIGGER_ID);
      }
    else
      {
        Debug.error("Autograde.off() - submit trigger not set.");
      }

    // Set autograding and ui flags.
    setAgUiState(agUIEvents.AUTOGRADE_OFF);
    
    // Rebuild the menu.
    createFlubarooMenu(ss);
    
    // Tell the user.
    setNotification(ss, 
                    "Autograde Notification", 
                    "Autograding has been turned off.");
    
  } // AutogradeClass.off()
  
  // finalizeOn()
  // ------------
  //
  // Finalize the process of enabling autograde.
  
  this.finalizeOn = function()
  {  
    var trigger = ScriptApp.newTrigger("onAutogradeSubmission")
                           .forSpreadsheet(ss)
                           .onFormSubmit()
                           .create();
    
    ScriptProperties.setProperty(SCRIPT_AUTOGRADE_SUBMIT_TRIGGER_ID, 
                                 trigger.getUniqueId());
                                 
    setAgUiState(agUIEvents.AUTOGRADE_ON);
    
    createFlubarooMenu(ss);
    
    setNotification(ss, 
                    "Autograde Notification", 
                    "Flubaroo is waiting for new submissions to " + 
                      "grade. Don't make any changes to the spreadsheet.");
                             
  } // AutogradeClass.finalizeOn()

  // isOn()
  // ------
  //
  // Check whether Autograde is enabled.
  
  this.isOn = function()
  {
    // Cast the script property as a Boolean.
    var isOn = !!ScriptProperties.getProperty(SCRIPT_AUTOGRADE_ENABLED);
    Debug.info("AutogradeClass.isOn(): " + isOn); 
    return isOn;
    
  } // AutogradeClass.isOn()

  // isOff()
  // -------
  //
  // Check whether Autograde is disabled.
  
  this.isOff = function()
  {
    // Cast the script property as a Boolean.
    var isOff = !ScriptProperties.getProperty(SCRIPT_AUTOGRADE_ENABLED);
    Debug.info("AutogradeClass.isOff(): " + isOff);
    return isOff;
    
  } // AutogradeClass.isOff()
    
  // TODO_AJR - Should get cleared earlier, at the moment only menuGradeStep1
  
  // isGatheringOptions()
  // --------------------
  
  this.isGatheringOptions = function()
  {
    return ScriptProperties.getProperty(SCRIPT_AUTOGRADE_GATHERING_OPTIONS) === "true";
    
  } // AutogradeClass.isGatheringOptions()
  
  // clearGatheringOptions()
  // -----------------------
  
  this.clearGatheringOptions = function()
  {
    ScriptProperties.deleteProperty(SCRIPT_AUTOGRADE_GATHERING_OPTIONS);
    
  } // AutogradeClass.clearGatheringOptions()
  
  this.uiOn = function ()
  {
    setAgUiState(agUIEvents.UI_ON);
    
  } // AutogradeClass.uiOn()

  this.uiOff = function ()
  {
    setAgUiState(agUIEvents.UI_OFF);
    
  } // AutogradeClass.uiOff()
  
} // AutogradeClass()

// Autograde event handlers
// ========================

// toggleAutograde()
// -----------------

// "toggle Autograde" menu event handler.
function toggleAutograde()
{
  Autograde.isOn() ? Autograde.off() : Autograde.on();

} // toggleAutograde()

// onAutogradeSubmission()
// -----------------------
//
// A form submission was made whilst autograde was enabled.

function onAutogradeSubmission()
{ 
  Debug.info("onAutogradeSubmission()");

  // Initial checks
  // --------------

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = getSheetWithSubmissions(ss);
  var grading_lock;

  Debug.assert(Autograde.isOn(), 
         "onAutogradeSubmission() - Autograde off, not expecting trigger");
   
  if (!gotSheetWithGrades(ss))
    {
      Debug.warning("onAutogradeSubmission() - no grades sheet.");
      return;
    }
  
  if (!sheet)
    {
      Debug.warning("onAutogradeSubmission() - no submission sheet.");
      return;
    }
  
  // Grade Submissions
  // -----------------
  //
  // While there are more submissions in the submissions sheet than 
  // have been graded keep on processing them. Two indexes are used for this, 
  // the number of rows completed in the submission sheet and a count of the 
  // number of submissions that have been graded - the submissions read index 
  // (SRI). This SRI is used rather than looking at the number of graded 
  // submissions in the grades sheet as there may be multiple submissions 
  // from the same student, and these would only show as one entry in the 
  // grades sheet.So the decision is based entirely on the submission sheet
  // and how many rows have been processed.

  // This could be "triggered" whilst another submission is being 
  // processed, so get an exclusive, public lock.
  grading_lock = LockService.getPublicLock();
  
  if (!grading_lock.tryLock(10))
    {
      Debug.info("onAutogradeSubmission() - Failed to get lock");
      grading_lock.releaseLock();
      return;
    }

  try
    {
      // We have lock, so a try/finally is used to make sure
      // the lock is released if we get an error mid-grading.
    
      Debug.info("onAutogradeSubmission() - got lock");    
    
      var next_empty_row = EmptySubmRow.get();
      
      Debug.assert(next_empty_row > MIN_NUM_SUBM_SHEET_ROWS, 
                   "onAutogradeSubmission() - empty row ptr invalid");
      
      var num_rows = sheet.getLastRow();
      
      Debug.info("onAutogradeSubmission() - (pre-grade) num_rows: " + num_rows + " " +
                 "next_empty_row: " + next_empty_row);
    
      while (next_empty_row <= num_rows)
        {
          // Grade the next row in the submissions sheet and email the result.
          
          gradeStep1(); 
          sendEmailGrades();
          
          // Get the figures to see if we need to go around again.
          
          next_empty_row = EmptySubmRow.get();
          num_rows = sheet.getLastRow();
          
          Debug.info("onAutogradeSubmission() - (post-grade) num_rows: " + num_rows + " " +
                     "next_empty_row: " + next_empty_row);
        }
    }
  finally
    {
      SpreadsheetApp.flush();
      grading_lock.releaseLock();
      Debug.info("onAutogradeSubmission() - lock released");
    }
      
} // onAutogradeSubmission()

