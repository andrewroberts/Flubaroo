// File: utilities.gas
// Description: 
// This file contains helper functions for a variety of purposes, as
// well as the functions that handle script installation and menu setup.

// TODO_AJR - Create a Utils object for all these not called by Google.

// TODO_AJR - Lots of potentially private functions in here.

// Event Handlers
// ==============

// onInstall: 
// Gets called when script is first installed.
// Sets up menu (really just calls onOpen() ).
function onInstall()
{
  onOpen();  
  showNewVersionNotice();
}  

// onOpen:
// Gets called when the spreadsheet is opened.
// Sets up the menu and shows a notification.
function onOpen()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  createFlubarooMenu(ss);
  
  // Rename "Sheet1" something more friendly to enhance useability.
  var status = renameSubmissionsSheet();
}

// Flubaroo Menu
// =============

function createFlubarooMenu(ss)
{
  var menuEntries = [];
             
  dumpConfig();
  
  if (Autograde.isOn())
    {
      // Don't allow the usual options. Just the ability to turn this off.
      menuEntries.push({name: langstr("FLB_STR_MENU_DISABLE_AUTO_GRADE"), functionName: "toggleAutograde"});
      
      debugMenu(menuEntries);
      
      ss.addMenu(gbl_menu_name, menuEntries);   
      
      return;
    }
   
  // Only show "Re-grade, Email Grade, View Report, etc, if (a) Grades sheet is present and
  // (b) user didn't just upgrade to a new version of Flubaroo in this sheet. If they just upgraded,
  // assignment must be re-graded first, incase format of Grades sheet is different in new version.
  else if (gotSheetWithGrades(ss) && !justUpgradedThisSheet())
    {
      // TODO_AJR - Reenable re-grading (presently duplicates grades sheet).
      // menuEntries.push({name: langstr("FLB_STR_MENU_REGRADE_ASSIGNMENT"), functionName: "menuGradeStep1"});
      
      menuEntries.push({name: langstr("FLB_STR_MENU_EMAIL_GRADES"), functionName: "menuEmailGrades"});
       
      // TODO_AJR - Reenable report, help tips and student feedback.
      
      /*
      menuEntries.push({name: langstr("FLB_STR_MENU_VIEW_REPORT"), functionName: "viewReport"});
            
      menuEntries.push(null); // line break

      if (helpTipsHidden())
        {
          menuEntries.push({name: langstr("FLB_STR_MENU_EDIT_HELP_TIPS"), functionName: "toggleHelpTips"});
        }
      else
        {
          menuEntries.push({name: langstr("FLB_STR_MENU_HIDE_HELP_TIPS"), functionName: "toggleHelpTips"});
        }

      var col_hidden = ScriptProperties.getProperty(SCRIPT_PROP_STUDENT_FEEDBACK_HIDDEN);
      
      if (col_hidden == "true")
        {
          menuEntries.push({name: langstr("FLB_STR_MENU_EDIT_FEEDBACK"), functionName: "toggleFeedback"});
        }
      else
        {
          menuEntries.push({name: langstr("FLB_STR_MENU_HIDE_FEEDBACK"), functionName: "toggleFeedback"});
        }
      */

    }
  else
    {
      menuEntries.push({name: langstr("FLB_STR_MENU_GRADE_ASSIGNMENT"), functionName: "gradeStep1"});
    }
   
  menuEntries.push(null); // line break
  menuEntries.push({name: langstr("FLB_STR_MENU_ENABLE_AUTO_GRADE"), functionName: "toggleAutograde"});
  menuEntries.push(null); // line break

  // TODO_AJR - Reenable language selection
  // menuEntries.push({name: langstr("FLB_STR_MENU_SET_LANGUAGE"), functionName: "setLanguage"});
  
  menuEntries.push({name: langstr("FLB_STR_MENU_ABOUT"), functionName: "aboutFlubaroo"});  
  
  debugMenu(menuEntries);
  
  ss.addMenu(gbl_menu_name, menuEntries);
  
  return;
}

// skipUIMenu()
// ------------

function skipUIMenu()
{
  UI.off();
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  createFlubarooMenu(ss);
  
} // skipUIMenu()

// displayUIMenu()
// ---------------

function displayUIMenu()
{
  UI.on();
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  createFlubarooMenu(ss);
  
} // displayUIMenu()

// TODO_AJR - Move to ui.gas

function aboutFlubaroo()
{  
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var app = UiApp.createApplication()
                      .setTitle(langstr("FLB_STR_MENU_ABOUT"))
                      .setWidth("500").setHeight("200");
  
   // create the main panel to hold all content in the UI for this step,
   var main_panel = app.createVerticalPanel()
                       .setStyleAttribute('border-spacing', '10px');
   app.add(main_panel);
 
   var hpanel_main = app.createHorizontalPanel()
                .setStyleAttribute('border-spacing', '10px');
   var vpanel1 = app.createVerticalPanel()
                .setStyleAttribute('border-spacing', '10px');
   
   // add a top level hpanel for instructions and picture
   var vpanel1 = app.createVerticalPanel()
       .setStyleAttribute('border-spacing', '10px')
       .add(app.createImage(FLUBAROO_WELCOME_IMG_URL));
   
   
   var vpanel2 = app.createVerticalPanel()
                .setStyleAttribute('border-spacing', '10px');
   
   var hpanel_r_top = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel("Flubaroo - " + gbl_version_str));
   var hpanel_r_mid = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel(langstr("FLB_STR_ABOUT_FLUBAROO_MSG1")));
   var hpanel_r_bot = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel(langstr("FLB_STR_ABOUT_FLUBAROO_MSG2")));
   vpanel2.add(hpanel_r_top);
   vpanel2.add(hpanel_r_mid);
   vpanel2.add(hpanel_r_bot);
    
     
   hpanel_main.add(vpanel1);
   hpanel_main.add(vpanel2);
 
   main_panel.add(hpanel_main);
 
   ss.show(app);
   
   logAboutFlubaroo();
}
 
function toggleFeedback()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var grades_sheet = getSheetWithGrades(ss);
  
  var num_stud_identifiers = Number(ScriptProperties.getProperty(SCRIPT_PROP_NUM_STUDENT_IDENTIFIERS));
  
  var metric_start_col = 2 + parseInt(num_stud_identifiers);
  var feedback_col_num =  metric_start_col + METRIC_STUDENT_FEEDBACK;
  var col_hidden = ScriptProperties.getProperty(SCRIPT_PROP_STUDENT_FEEDBACK_HIDDEN);
  
  if (col_hidden == "true")
    {
      ss.setActiveSheet(grades_sheet);
      grades_sheet.showColumns(feedback_col_num);
      var range = grades_sheet.getRange(gbl_grades_start_row_num + 1, feedback_col_num);
      grades_sheet.setActiveSelection(range);
      ScriptProperties.setProperty(SCRIPT_PROP_STUDENT_FEEDBACK_HIDDEN, "false");
    }
  else
    {
      if (!Debug.debugOn)
        {
          grades_sheet.hideColumns(feedback_col_num);
          ScriptProperties.setProperty(SCRIPT_PROP_STUDENT_FEEDBACK_HIDDEN, "true");
        }
    }
  
  createFlubarooMenu(ss);
}

function helpTipsHidden()
{
  var ht_hidden = ScriptProperties.getProperty(SCRIPT_PROP_HELP_TIPS_HIDDEN);
  
  if (ht_hidden === null)
    {
      // handle first case when not set yet.
      ht_hidden = "true";
    }
  
  if (ht_hidden == "true")
    {
      return true;
    }
  else
    {
      return false;
    }
}

function toggleHelpTips()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var subm_sheet = getSheetWithSubmissions(ss);
  var num_stud_identifiers = Number(ScriptProperties.getProperty(SCRIPT_PROP_NUM_STUDENT_IDENTIFIERS));
  var tips_present = false;
  
  if (getTipsRow(subm_sheet) != null)
    {
      tips_present = true;
    }
  
  if (helpTipsHidden())
    {
      // unhide or insert Help Tips row
      ss.setActiveSheet(subm_sheet);
      ScriptProperties.setProperty(SCRIPT_PROP_HELP_TIPS_HIDDEN, "false");

      if (tips_present)
        {
          subm_sheet.showRows(2);
        }
      else
        {
          subm_sheet.insertRowAfter(1);
        }
      
      var range = subm_sheet.getRange("B2");
      subm_sheet.setActiveSelection(range);
    }
  else
    {
      // hide it, if it exists
      if (tips_present)
        {
          subm_sheet.hideRows(2);
        }
      
      ScriptProperties.setProperty(SCRIPT_PROP_HELP_TIPS_HIDDEN, "true");
    }
  
  createFlubarooMenu(ss);
}

// Google Analytics Logging
// ========================

function createGATrackingUrl(encoded_page_name)
{
  var utmcc = createGACookie();
  
  if (utmcc == null)
    {
      return null;
    }
 
  var ga_url1 = "http://www.google-analytics.com/__utm.gif?utmwv=5.2.2&utmhn=www.flubaroo-analytics.com&utmcs=-&utmul=en-us&utmje=1&utmdt&utmr=0=";
  var ga_url2 = "&utmac=UA-22064161-3&utmcc=" + utmcc + "&utmu=DI~";
  var ga_url_full = ga_url1 + encoded_page_name + "&utmp=" + encoded_page_name + ga_url2;
  
  return ga_url_full;
}

function createGACookie()
{
  var a = "";
  var b = "100000000";
  var c = "200000000";
  var d = "";

  var dt = new Date();
  var ms = dt.getTime();
  var ms_str = ms.toString();
 
  var flubaroo_uid = UserProperties.getProperty("flubaroo_uid");
  if ((flubaroo_uid == null) || (flubaroo_uid == ""))
    {
      // shouldn't happen unless user explicitly removed flubaroo_uid from properties,
      // or hasn't graded yet.
      return null;
    }
  
  a = flubaroo_uid.substring(0,9);
  d = flubaroo_uid.substring(9);
  
  utmcc = "__utma%3D451096098." + a + "." + b + "." + c + "." + d 
          + ".1%3B%2B__utmz%3D451096098." + d + ".1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B";
 
  return utmcc;
}

function logGrading(ss_name)
{
  if (ss_name.indexOf('Geography 10 - Quiz #2') == -1)
    {
      // probably not the "try it now" sample. so anonymously record that another
      // assignment was graded!
      var ga_url = createGATrackingUrl("Assignment%20Graded");
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
            
      // log grading for this specific version (to track fragmentation of versions)      
      var ga_url = createGATrackingUrl(encodeURIComponent(gbl_version_str));
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
      
      logActiveUserGrading();
    }
  else // sample assignment
    {
      var ga_url = createGATrackingUrl("Sample%20Graded");
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
    }
}

function logActiveUserGrading()
{
  // track 30 day actives using month. to be counted as an active,
  // user, user must grade at least 1 assignment during the month.
  // we also check that the lifetime usage > 4, to filter out
  // people just playing around with or testing out Flubaroo.
  var track_month = UserProperties.getProperty(USER_PROP_GRADE_MONTH);
  var track_month_count = UserProperties.getProperty(USER_PROP_GRADE_MONTH_COUNT);
  var track_lifetime_count = UserProperties.getProperty(USER_PROP_GRADE_LIFETIME_COUNT);
      
  var d = new Date();
  var current_month = (d.getMonth() + 1).toString();
      
  // init if never setup
  if (track_month == null)
    {
      track_month = current_month;
    }
  if (track_month_count == null)
    {
      track_month_count = "0";
    }
  if (track_lifetime_count == null)
    {
      track_lifetime_count = "0";
    }
            
  if (current_month == track_month)
    {
      track_month_count = parseInt(track_month_count);
      track_month_count++;
      track_month_count = track_month_count.toString();
    }
  else
    {
      track_month = current_month;
      track_month_count = "1"; // start over
    }
  
  track_lifetime_count = parseInt(track_lifetime_count);
  track_lifetime_count++;
  track_lifetime_count = track_lifetime_count.toString();
      
  UserProperties.setProperty(USER_PROP_GRADE_MONTH, track_month);
  UserProperties.setProperty(USER_PROP_GRADE_MONTH_COUNT, track_month_count);
  UserProperties.setProperty(USER_PROP_GRADE_LIFETIME_COUNT, track_lifetime_count);
  
  // log once and only once per month
  if ((track_lifetime_count > 4) && (track_month_count == "1"))
    {  
      var ga_url = createGATrackingUrl("Active%20Monthly%20Users"); 
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
    }
}

function logEmail()
{
  var ga_url = createGATrackingUrl("Emailed%20Grades");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logAboutFlubaroo()
{
  var ga_url = createGATrackingUrl("About%20Flubaroo");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logFirstInstall()
{
  var ga_url = createGATrackingUrl("First%20Install");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logRepeatInstall()
{
  var ga_url = createGATrackingUrl("Repeat%20Install");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

// setCurrentVersionInfo:
// Called just before grading occurs. So new version isn't set after install
// until after first grade.
function setCurrentVersionInfo()
{
  var sver = ScriptProperties.getProperty(SCRIPT_PROP_SHEET_INSTALLED_VERSION);
  if ((sver == null) || (sver != gbl_version_str))
    {
      ScriptProperties.setProperty(SCRIPT_PROP_SHEET_INSTALLED_VERSION, gbl_version_str);
    }

  // take note of the latest version the user has installed across all sheets.
  // used to show user version update notice.
  var uver = UserProperties.getProperty(USER_PROP_LATEST_VERSION_INSTALLED);
  if ((uver == null) || (uver != gbl_version_str))
    {
      UserProperties.setProperty(USER_PROP_LATEST_VERSION_INSTALLED, gbl_version_str);
    }
}

function setFlubarooUid()
{ 
  var flubaroo_uid = UserProperties.getProperty("flubaroo_uid");
  if (flubaroo_uid == null || flubaroo_uid == "")
    {
      // user has never installed Flubaroo before (in any spreadsheet)
      var dt = new Date();
      var ms = dt.getTime();
      var ms_str = ms.toString();
 
      UserProperties.setProperty("flubaroo_uid", ms_str);
      logFirstInstall();
    }
}

// Spreadsheet Access
// ==================

 // setCellValue:
 // Given a reference to a sheet, and a row and column number (starts  
 // from 1), writes the value given into the cell specified by the row
 // and column.
 function setCellValue(sheet, row, col, value)
 {
   var single_cell = sheet.getRange(row, col, 1, 1);
   single_cell.setValue(value);
 }
 
 // getCellValue
 // Given a reference to a sheet, and a row and column number (starts
 // from 1), returns the value given in the cell specified by the row
 // and column.
 function getCellValue(sheet, row, col)
 {
   var single_cell = sheet.getRange(row, col, 1, 1);
   return single_cell.getValue();
 }
 
 // setCellColor
 // Given a reference to a sheet, and a row and column number (starts  
 // from 1), changes the background color (to the value specified)
 // for the cell in the row and col given.
 function setCellColor(sheet, row, col, color)
 {
   var single_cell = sheet.getRange(row, col, 1, 1);
   single_cell.setBackgroundColor(color);
 }

// In the past these reads have been cached but that caused problems 
// with autograding and testing didn't measure any difference in
// time taken.
function singleRowToArray(sheet, row_num, num_cols)
{
  var result = [];

  if (num_cols === -1) 
    {
      // Get all of the columns.
      num_cols = sheet.getLastColumn();
    }

  // Read in the values for this row.
  result = sheet.getRange(row_num, 1, 1, num_cols).getValues()[0];
  
  return result; 
}

// writeArrayToRow:
// Given an array of values, writes it out to the row of the sheet specified.
// Row ids start from 1. Note that this will override any pre-existing content
// in the affected cells of that row.
// The row need not exist ahead of time.
function writeArrayToRow(sheet, row_num, start_col, row_values, bold, color)
{
   var row_range = sheet.getRange(row_num, 1, start_col, row_values.length);
   var set_of_rows = new Array(1);
   var result;
   
   set_of_rows[0] = row_values;
  
   if (bold)
     {
       row_range.setFontWeight("bold");
     }
  
   if (color)
     {
       row_range.setBackgroundColor(color);
     }
  
   result = row_range.setValues(set_of_rows);
    
   Debug.assert(result !== null, "writeArrayToRow() - Failed to write values");
}

// Misc
// ====

// setNotification()
// -----------------

setNotification = function(ss, title, msg)
{
  // TODO_AJR - Internationalize.
  
  // TODO_DA - Doesn't always work ...
  ss.toast(msg, title, 300);
  
} // setNotification()
  
// deleteTrigger()
// ---------------

deleteTrigger = function(trigger_id)
{
  // Locate a trigger by unique ID.
  var all_triggers = ScriptApp.getProjectTriggers();
  var i;
  var found_trigger = false;
  
  // Loop over all triggers.
  for (i = 0; i < all_triggers.length; i++) 
    {
      if (all_triggers[i].getUniqueId() === trigger_id) 
        {
          // Found the trigger so delete it.
        ScriptApp.deleteTrigger(all_triggers[i]);
        found_trigger = true;
        break;
        }
    }
  
  Debug.assert(found_trigger, 
               "deleteTrigger() - tried to delete a non-existant trigger.");  
  
} // deleteTrigger()
  
// createPdfCertificate()
// ----------------------
//
// The code is based on the "Bus Conduct Report" script by 
// TJ Houston tjhouston.com (tj@tjhouston.com).

// TODO_AJR - Make sending a certificate configurable. At the moment you can
// disable the feature by not defining the template ID and name.

function createPdfCertificate(keys)
{
  Debug.info("createPdfCertificate()");

  if (DOC_TEMPLATE === "" || DOC_NAME === "")
    {
      Debug.info("createPdfCertificate() - No certificate available");
      return null;
    }

  // Get document template, copy it as a new temp doc, and save 
  // the Doc’s id.
  var copy_id = DocsList.getFileById(DOC_TEMPLATE)
                        .makeCopy(DOC_NAME + ' for ' + keys["<NAME>"])
                        .getId();
  
  // Open the temporary document.
  var copy_doc = DocumentApp.openById(copy_id);
  
  // Get the document’s body section.
  var copy_body = copy_doc.getActiveSection();
  
  // Replace place holder keys,in our google doc template.
  for (var key in keys)
    {
      copy_body.replaceText(key, keys[key]);
    }
  
  // Save and close the temporary document.
  copy_doc.saveAndClose();
  
  // Convert temporary document to PDF by using the getAs blob conversion.
  var pdf = DocsList.getFileById(copy_id).getAs("application/pdf"); 
  
  // Delete temp file.
  DocsList.getFileById(copy_id).setTrashed(true);

  return pdf;
  
} // createPdfCertificate()

// strTrim:
// Trims the whitespace before and after the string.
// Necessary b/c sometimes cells from Form submissions have extra whitespace
// at the beginning for some reason, leading to "wrong" answers when graded.
function strTrim(str) 
{
  return str.replace(/^\s+|\s+$/g,"");
}

 // floatToPrettyText:
 // Takes a float like 22.123456789 and returns "22.12".
 // Note: this function will return 2 digits past the decimal, but will
 // do so without rounding.
 function floatToPrettyText(f)
 {
   s1 = f + ""; // float to string
   sp = s1.split("."); // split at decimal
 
   s2 = sp[0] + ".";
   if (sp.length > 1)
     {
       s2 = s2 + sp[1].substring(0,2);
     }
   else
     {
       s2 = s2 + "00";
     }
 
   return s2;
 }
 
 // renameSubmissionsSheet:
 // Rename "Sheet1" to something more friendly to enhance useability. When
 // looking for the submissions in the future, we'll refer to the spreadsheet
 // with this name.
 // TODO: Make sure this doesn't prevent future submissions
 // Returns:
 //    STATUS_OK if rename successful.
 //    STATUS_NOT_FOUND if 'Sheet1' sheet not present.
 //    STATUS_NO_EFFECT if 'Sheet1' had previously been renamed, and so another
 //      rename wasn't done.
 function renameSubmissionsSheet()
 {
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var sheet = ss.getSheetByName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
   if (sheet)
     {
       // sheet has already been renamed.
       return STATUS_NO_EFFECT;
     }
   
   // for non-english languages, try with the older style name.
   // might still be laying around.
   var sheet = ss.getSheetByName(gbl_subm_sheet_name);
   if (sheet)
     {
       // sheet has already been renamed.
       return STATUS_NO_EFFECT;
     }
   
   var all_sheets = ss.getSheets();
   if (all_sheets.length == 1)
     {
       // Only 1 sheet. Assume it has the student submissions, and
       // rename it to something more friendly (and which we can refer
       // to later).
       sheet = all_sheets[0];
       sheet.setName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
       return STATUS_OK;
     }
   else if (all_sheets.length > 1)
     {
       // More than one sheet. If can find "Sheet1", assume this one has
       // the submissions and rename it.
       sheet = ss.getSheetByName("Sheet1");
       if (sheet != null)
         {
           // Rename "Sheet1" to something more friendly.
           sheet.setName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
           return STATUS_OK;
         }
     }
   num_rows
   // Can't locate sheet with submissions. Tell the user.
   return STATUS_NOT_FOUND;
 }

// getTipsRow:
function getTipsRow(subm_sheet)
{
  // Get the help tips from the second row.
  var help_tips_vals = singleRowToArray(subm_sheet,
                                        2,
                                        getNumQuestionsFromSubmissions(subm_sheet));

  if (help_tips_vals[0] !== "")
    {
      return null;
    }
  
  return help_tips_vals;
}

function showNewVersionNotice()
{
  // check if this is the first time the user has upgrade to or installed a new
  // version of Flubaroo. if so, just this once, we'll show them a message.
  if (justUpgradedFirstTime())
    {
      if (gbl_show_version_update_notice && (langstr("FLB_STR_NEW_VERSION_NOTICE") != ""))
        {
          Browser.msgBox("New Flubaroo Version!", langstr("FLB_STR_NEW_VERSION_NOTICE"),
                         Browser.Buttons.OK);
        }
    }
}

// justUpgradedThisSheet:
// Returns true if this is the first time user has upgraded to or installed
// a new version of Flubaroo in this spreadsheet.
function justUpgradedThisSheet()
{
  // Let the user know if this is a new version.
  var sver = ScriptProperties.getProperty(SCRIPT_PROP_SHEET_INSTALLED_VERSION);
  
  // new version doesn't get set in properties until assignment
  // is first graded after upgrading.
  if ((sver == null) || (sver != gbl_version_str))
    {
      return true;
    }
  
  return false;
}

// justUpgradedFirstTime:
// Returns true if this is the first time the user has upgrade to or installed a new
// version of Flubaroo.
function justUpgradedFirstTime()
{
  var uver = UserProperties.getProperty(USER_PROP_LATEST_VERSION_INSTALLED);
  
  // new version doesn't get set in properties until assignment
  // is first graded after upgrading.
  if ((uver == null) || (uver != gbl_version_str))
    {
      return true;
    }
  
  return false;
}
